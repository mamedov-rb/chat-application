plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.rb.alwaysontheroad.chatservice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

bootRun {
    systemProperties = System.properties
    jvmArgs = ['-Xms128M', '-Xmx256M', '-XX:ActiveProcessorCount=2', '-Dspring.profiles.active=local']
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

ext['log4j2.version'] = '2.17.0'

ext {
    set('springCloudVersion', "2021.0.1")
    set('springBootAdminVersion', "2.6.2")
    set('mapStructVersion', '1.2.0.Final')
    set('spockVersion', '2.0-groovy-3.0')
    set('testcontainersVersion', '1.16.0')
    set('commonsLang3Version', '3.12.0')
    set('commonsCollectionsVersion', '3.2.2')
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    runtimeOnly "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'io.lettuce:lettuce-core:6.1.8.RELEASE'
//    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
//    implementation 'org.springframework.session:spring-session:1.3.5.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.zalando:logbook-spring-boot-starter:2.14.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    implementation "org.mapstruct:mapstruct-jdk8:${mapStructVersion}"
    compileOnly "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    implementation 'org.jetbrains:annotations:23.0.0'
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    testImplementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "commons-collections:commons-collections:${commonsCollectionsVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:spock:${testcontainersVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}
